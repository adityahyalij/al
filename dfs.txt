from collections import defaultdict

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def addEdge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)

    def DFS(self, v, visited):
        visited[v] = True
        print(v, end=" ")

        for i in self.graph[v]:
            if not visited[i]:
                self.DFS(i, visited)

    def DFSTraversal(self):
        visited = [False] * len(self.graph)
        print("Depth First Traversal:")
        for v in range(len(self.graph)):
            if not visited[v]:
                self.DFS(v, visited)

# Driver code

# Create a graph
g = Graph()
g.addEdge(0, 1)
g.addEdge(0, 2)
g.addEdge(1, 0)
g.addEdge(1, 3)
g.addEdge(2, 0)
g.addEdge(2, 4)
g.addEdge(3, 1)
g.addEdge(4, 2)

g.DFSTraversal()