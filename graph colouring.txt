class GraphColoring:
    def __init__(self, graph, colors):
        self.graph = graph
        self.colors = colors
        self.num_vertices = len(graph)
        self.solution = [-1] * self.num_vertices
        self.min_colors = float('inf')

    def is_safe(self, vertex, color):
        # Check if it is safe to color the vertex with the given color
        for neighbor in self.graph[vertex]:
            if self.solution[neighbor] == color:
                return False
        return True

    def solve(self):
        self.solve_util(0)

    def solve_util(self, vertex):
        # Base case: If all vertices are colored, a solution is found
        if vertex == self.num_vertices:
            self.update_solution()
            return

        # Try all possible colors for the current vertex
        for color in range(self.colors):
            if self.is_safe(vertex, color):
                self.solution[vertex] = color
                self.solve_util(vertex + 1)
                self.solution[vertex] = -1  # Backtrack

    def update_solution(self):
        # Update the minimum number of colors required and the solution
        used_colors = set(self.solution)
        num_colors = len(used_colors)
        if num_colors < self.min_colors:
            self.min_colors = num_colors
            self.best_solution = self.solution.copy()

    def get_solution(self):
        return self.best_solution

    def get_min_colors(self):
        return self.min_colors


# Driver code

graph = {
    0: [1, 2, 3],
    1: [0, 2],
    2: [0, 1, 3],
    3: [0, 2]
}

num_vertices = len(graph)
colors = 3  # Number of colors available

graph_coloring = GraphColoring(graph, colors)
graph_coloring.solve()

solution = graph_coloring.get_solution()
min_colors = graph_coloring.get_min_colors()

print("Graph Coloring Solution:")
for vertex, color in enumerate(solution):
    print(f"Vertex {vertex}: Color {color}")
print(f"\nMinimum number of colors required: {min_colors}")