import sys

class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for _ in range(vertices)] for _ in range(vertices)]

    def addEdge(self, u, v, weight):
        self.graph[u][v] = weight
        self.graph[v][u] = weight

    def minKey(self, key, mstSet):
        min_val = sys.maxsize
        min_idx = -1

        for v in range(self.V):
            if key[v] < min_val and not mstSet[v]:
                min_val = key[v]
                min_idx = v

        return min_idx

    def primMST(self):
        key = [sys.maxsize] * self.V
        parent = [None] * self.V
        mstSet = [False] * self.V

        key[0] = 0  # Start with the first vertex

        for _ in range(self.V):
            u = self.minKey(key, mstSet)
            mstSet[u] = True

            for v in range(self.V):
                if (
                    self.graph[u][v] > 0
                    and not mstSet[v]
                    and self.graph[u][v] < key[v]
                ):
                    key[v] = self.graph[u][v]
                    parent[v] = u

        print("Edges in the Minimum Spanning Tree:")
        for i in range(1, self.V):
            print(parent[i], "--", i, "==", self.graph[i][parent[i]])

# Driver code

g = Graph(5)
g.addEdge(0, 1, 2)
g.addEdge(0, 3, 6)
g.addEdge(1, 2, 3)
g.addEdge(1, 3, 8)
g.addEdge(1, 4, 5)
g.addEdge(2, 4, 7)
g.addEdge(3, 4, 9)

g.primMST()